/**
 * Define a grammar called Hello
 */
grammar MNC;
WS : [ \t\r]+ -> skip ; // skip spaces, tabs, newlines

program : MAIN EOD body;

body : START (EOD)+ statements END (EOD)*;

statements : (statement EOD)*|('\n')*;

statement : arithmetic|assignment|functioncall|conditional|loop|funcdeclaration|(EOD)*;

arithmetic : type ':' IDENTIFIER;

type : (num) | (boolt);

bool : TRUE | FALSE;

assignment : IDENTIFIER EQUALS expr;

expr : term ((ADD|SUB) term)*;

term : factor ((MUL|DIV) factor)*;

factor : IDENTIFIER|number;

number : (ADD|SUB)(DIGIT)+|(DIGIT)+;

functioncall : IDENTIFIER OPENPAR(IDENTIFIER((SEPERATOR)IDENTIFIER)*)*CLOSEPAR(EOD);

conditional : IF OPENPAR(boolcheck|bool)CLOSEPAR(body)(ELSE(body))?;

boolcheck : expr CONDITIONS expr; 

loop : LOOP OPENPAR(IDENTIFIER|DIGIT)CLOSEPAR TO OPENPAR(IDENTIFIER|DIGIT)CLOSEPAR WITH DIGIT body;

funcdeclaration : FUNCTION IDENTIFIER OPENPAR(IN(IDENTIFIER)* OUT(IDENTIFIER)*)body;

MAIN : 'main';

START : 'start';

END : 'end';

PROGRAMEND : 'mainEnd';

IDENTIFIER : ([a-z]|[A-Z]|'_')([a-z]|[A-Z]|'_'|[0-9])*;

EOD : '\n';

EQUALS : '=';

SIGN : ADD|SUB;

DIGIT : [0-9];

num : 'number';

boolt : 'boolean';

TRUE : 'true';

FALSE : 'false';

CONDITIONS : '=='|'!='|'<='|'>='|'<'|'>';

ADD : '+';

SUB : '-';

MUL : '*';

DIV : '/';

OPENPAR : '(';

CLOSEPAR : ')';

SEPERATOR : ',';

IF : 'if';

ELSE : 'else';

LOOP : 'loop:';

TO : 'to';

WITH : 'with';

FUNCTION : 'function:';

IN : 'in:';

OUT : 'out:';