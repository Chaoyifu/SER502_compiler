//import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.TerminalNode;

//import MNCParser.LoopparContext;



public class visitor2intermediateCode extends MNCBaseVisitor<String>{
	
	private int temp_count=0;
	private int loop_count=0;
	private int if_count=0;
	private int else_count=0;

	CommonTokenStream tokens;
	public visitor2intermediateCode(CommonTokenStream tokens) {
		super();
		this.tokens = tokens;
	}

	@Override
	public String visitTerminal(TerminalNode arg0) {
		// TODO Auto-generated method stub
		switch(arg0.getSymbol().getType()){
		case MNCLexer.MAIN: System.out.println("\n main");
							break;
		case MNCLexer.START: System.out.println("\n start");
							break;
		case MNCLexer.END: System.out.println("\n end");
							break;
		case MNCLexer.NUM: System.out.println("\n number");
							break;
		case MNCLexer.BOOLT: System.out.println("\n boolean");
							break;
		case MNCLexer.TRUE: System.out.println("\n true");
		break;
		case MNCLexer.FALSE: System.out.println("\n false");
		break;
		case MNCLexer.IF: System.out.println("\n if");
		break;
		case MNCLexer.ELSE: System.out.println("\n else");
		break;
		case MNCLexer.LOOP: System.out.println("\n loop");
		break;
		case MNCLexer.TO: System.out.println("\n to");
		break;
		case MNCLexer.WITH: System.out.println("\n with");
		break;
		case MNCLexer.FUNCTION: System.out.println("\n function");
		break;
		case MNCLexer.IN: System.out.println("\n in");
		break;
		case MNCLexer.OUT: System.out.println("\n out");
		break;
		case MNCLexer.PRINT: System.out.println("\n print");
		break;
		case MNCLexer.READ: System.out.println("\n readInput");
		break;
		case MNCLexer.EOL: System.out.println("\n eol");
		break;
		case MNCLexer.EQUALS: System.out.println("\n =");
		break;
		case MNCLexer.DIGIT: System.out.println("\n 0-9");
		break;
		case MNCLexer.CONDITIONS: System.out.println("\n ==");
		break;
		case MNCLexer.ADD: System.out.println("\n add");
		break;
		case MNCLexer.SUB: System.out.println("\n sub");
		break;
		case MNCLexer.MUL: System.out.println("\n mul");
		break;
		case MNCLexer.DIV: System.out.println("\n div");
		break;
		case MNCLexer.OPENPAR: System.out.println("\n openpar");
		break;
		case MNCLexer.CLOSEPAR: System.out.println("\n closepar");
		break;
		case MNCLexer.ARRAYOPEN: System.out.println("\n [");
		break;
		case MNCLexer.ARRAYCLOSE: System.out.println("\n ]");
		break;
		case MNCLexer.SEPERATOR: System.out.println("\n seperator");
		break;
		case MNCLexer.COLON: System.out.println("\n colon   :    ");
		break;
		case MNCLexer.IDENTIFIER: System.out.println("\n identifier");
		break;
		default: System.out.println("token not found");
		}
//		System.out.println("terminal value: "+arg0.getText());
		return null;
	}

	@Override
	public String visitProgram(MNCParser.ProgramContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin program");
		for(int i=0;i<ctx.funcdeclaration().size();i++){
			visit(ctx.funcdeclaration(i));
		}
		System.out.println("SRT    ");
//		if (ctx.MAIN()!= null){
//			visit(ctx.MAIN());
//		}
		if (ctx.body()!= null){
			visit(ctx.body());
		}
		System.out.println("HLT");
//		System.out.println(ctx.body().toString());
		return "";
	}

	@Override
	public String visitBody(MNCParser.BodyContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin body");
		if (ctx.statements()!= null){
			visit(ctx.statements());
		}
		return null;
	}

	@Override
	public String visitStatements(MNCParser.StatementsContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin statements");
		for (int i=0;i<ctx.statement().size();i++){
			visit(ctx.statement(i));
		}
		return null;
	}

	@Override
	public String visitStatement(MNCParser.StatementContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin statement");
		if (ctx.arithmetic()!= null){
//			System.out.println("\nin arithmetic");
			visit(ctx.arithmetic());
		}
		if (ctx.assignment()!= null){
//			System.out.println("\nin assignment");
			visit(ctx.assignment());
		}
		if (ctx.functioncall()!= null){
//			System.out.println("\nin function call");
			visit(ctx.functioncall());
		}
		if (ctx.conditional()!= null){
//			System.out.println("\nin conditional");
			visit(ctx.conditional());
		}
		if (ctx.loop()!= null){
//			System.out.println("\nin loop");
			visit(ctx.loop());
		}
//		if (ctx.funcdeclaration()!= null){
////			System.out.println("\nin function declaration");
//			visit(ctx.funcdeclaration());
//		}
		if (ctx.printcall()!= null){
//			System.out.println("\nin printcall");
			visit(ctx.printcall());
		}
		return null;
	}

	@Override
	public String visitArithmetic(MNCParser.ArithmeticContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin arithmetic");
//		if (ctx.type()!= null){
		String str="var "+visit(ctx.var())+" "+visit(ctx.type());
//			visit(ctx.type());
//		}
//		if (ctx.var()!= null){
//			visit(ctx.var());
//		}
		return str;
	}
	
	@Override
	public String visitVar(MNCParser.VarContext ctx){
//		System.out.println("\nin var");
		if(ctx.IDENTIFIER()!=null){
			String id = ctx.IDENTIFIER().getText()+ " -1";
//			visit(ctx.IDENTIFIER());
			return id;
		}
		if(ctx.array()!=null){
			String arr = visit(ctx.array());
			return arr;
		}
		return null;
	}
	
	@Override
	public String visitArray(MNCParser.ArrayContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin array");
//		if(ctx.IDENTIFIER()!=null){
//			visit(ctx.IDENTIFIER());
//		}
//		if(ctx.ARRAYOPEN()!=null){
//			visit(ctx.ARRAYOPEN());
//		}
		String arr = ctx.IDENTIFIER(0).getText()+ " ";
//		int size = 0;
		if(ctx.DIGIT().size()>0){
			for(int i=0; i<ctx.DIGIT().size(); i++){
//			visit(ctx.DIGIT(i));
//			size+= Integer.parseInt(ctx.DIGIT(i).getText());
//			size = size*10;
				arr = arr+ctx.DIGIT(i).getText();
			}
		}
		else{
			arr=arr+ctx.IDENTIFIER(1).getText();
		}
//		if(ctx.ARRAYCLOSE()!=null){
//			visit(ctx.ARRAYCLOSE());
//		}
		return arr;
	}

	@Override
	public String visitType(MNCParser.TypeContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin type");
		if (ctx.NUM()!= null){
//			visit(ctx.NUM());
			return "NUM";
		}
		if (ctx.BOOLT()!= null){
//			visit(ctx.BOOLT());
			return "BLN";
		}
		return null;
	}

	@Override
	public String visitBool(MNCParser.BoolContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin bool");
		if (ctx.TRUE()!= null){
			return "true";
//			visit(ctx.TRUE());
		}
		if (ctx.FALSE()!= null){
			return "false";
//			visit(ctx.FALSE());
		}
		return null;
	}

	@Override
	public String visitAssignment(MNCParser.AssignmentContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin assignment");
//		if (ctx.var()!= null){
//			visit(ctx.var());
//		}
//		if (ctx.EQUALS()!= null){
//			visit(ctx.EQUALS());
//		}
		String str="";
		System.out.println(ctx.getText());
		if((ctx.var()).array()!=null){
			str = "EAR "+visit(ctx.var());
		}
		if((ctx.var()).IDENTIFIER()!=null){
			str = "EQL "+(ctx.var()).IDENTIFIER().getText();
			
		}
		System.out.println("1"+ctx.getText()+"\t"+ctx.expr().getText());
		if (ctx.expr()!= null){
			str = str + " "+visit(ctx.expr());
		}
		System.out.println("2"+ctx.getText());
		if (ctx.READ()!= null){
			str = str + " $IN";
		}
		System.out.println(str);
		return null;
	}

	@Override
	public String visitExpr(MNCParser.ExprContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin expression");
		String str="";
		if (ctx.expr() == null){
			return visit(ctx.term());
		}
		else{
			int count = temp_count;
			temp_count++;
			if (ctx.ADD()!= null){
				str="ADD ";
			}
			if (ctx.SUB()!= null){
				str="SUB ";
			}
			str = str+count+"t "+visit(ctx.term())+" "+visit(ctx.expr());
			System.out.println(str);
//			if (ctx.expr()!= null){
//				visit(ctx.expr());
//			}
			return ""+count+"t";
		}
//		return null;
	}
	
	@Override
	public String visitTerm(MNCParser.TermContext ctx){
//		System.out.println("\nin term");
		String str="";
		if (ctx.term()== null){
			return visit(ctx.factor());
		}
		else{
			int count = temp_count;
			temp_count++;
			if (ctx.MUL()!= null){
				str = "MUL ";
//				visit(ctx.MUL());
			}
			if (ctx.DIV()!= null){
//				visit(ctx.DIV());
				str = "DIV ";
			}
			str = str+count+"t "+visit(ctx.factor())+" "+visit(ctx.term());
			System.out.println(str);
//			if (ctx.term()!= null){
//				visit(ctx.term());
//			}
			return ""+count+"t";
		}
//		return null;
	}
	
	@Override
	public String visitFactor(MNCParser.FactorContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin factor");
		if (ctx.element()!= null){
			return visit(ctx.element());
		}
//		if (ctx.OPENPAR()!= null){
//			visit(ctx.OPENPAR());
//		}
		if (ctx.expr()!= null){
			return visit(ctx.expr());
		}
//		if (ctx.CLOSEPAR()!= null){
//			visit(ctx.CLOSEPAR());
//		}
		return null;
	}

	@Override
	public String visitElement(MNCParser.ElementContext ctx){
//		System.out.println("\nin element");
		if((ctx.var()).array()!=null){
			int count = temp_count;
			String str = "EAR "+count+"t "+visit(ctx.var());
			temp_count++;
			System.out.println(str);
			return ""+count+"t";
			
		}
		if((ctx.var()).IDENTIFIER()!=null){
			String str = ""+(ctx.var()).IDENTIFIER().getText();
			return str;
			
		}
//		if(ctx.var()!=null){
//			return visit(ctx.var());
//		}
		if(ctx.number()!=null){
			return visit(ctx.number());
		}
		if(ctx.bool()!=null){
			return visit(ctx.bool());
		}
		return null;
	}
	
	@Override
	public String visitNumber(MNCParser.NumberContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin number");
		String str = "";
		if (ctx.sign()!= null){
			str+= visit(ctx.sign());
		}
//		if (ctx.DIGIT()!= null){
			for (int i=0; i<ctx.DIGIT().size();i++){
//				visit(ctx.DIGIT(i));
				str+=ctx.DIGIT(i).getText();
				
			}
//		}
		return str;
	}

	@Override
	public String visitConditional(MNCParser.ConditionalContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin conditional");
//		if(ctx.IF()!=null){
//			visit(ctx.IF());
//		}
//		if(ctx.OPENPAR()!=null){
//			visit(ctx.OPENPAR());
//		}
		String strCond = "";
		if(ctx.boolcheck()!=null){
			strCond=visit(ctx.boolcheck());
		}
		if(ctx.var()!=null){
			strCond="JNE "+if_count+"if ";
			String str = "";
			if_count++;
			if((ctx.var()).array()!=null){
				str = "EAR "+temp_count+"t "+visit(ctx.var());
				System.out.println(str);
				strCond = strCond + temp_count+"t true";
				temp_count++;
				
			}
			if((ctx.var()).IDENTIFIER()!=null){
				strCond = strCond + (ctx.var()).IDENTIFIER().getText()+" true";
//				str = "EQL "+(ctx.var()).IDENTIFIER().getText();
				
			}
		}
//		if(ctx.CLOSEPAR()!=null){
//			visit(ctx.CLOSEPAR());
//		}
		System.out.println(strCond);
//		if(ctx.body(0)!=null){
		visit(ctx.body(0));
//		}
		if(ctx.ELSE()!=null){
			System.out.println("JMP"+if_count +"ifelse");
			System.out.println("LBL "+if_count+"if");
			visit(ctx.ELSE());
			if(ctx.body(1)!=null){
				visit(ctx.body(1));
			}
		}
		else{
			System.out.println("LBL "+if_count+"if");
		}
		return null;
	}
	
	

	@Override
	public String visitLooppar(MNCParser.LoopparContext ctx) {
		// TODO Auto-generated method stub
		if(ctx.number()!=null){
			System.out.println("EQL "+"");
		}
		return "";
	}

	@Override
	public String visitLoop(MNCParser.LoopContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin loop");
//		if(ctx.LOOP()!=null){
//			visit(ctx.LOOP());
//		}
//		if(ctx.OPENPAR(0)!=null){
//			visit(ctx.OPENPAR(0));
//		}
		System.out.println("LBL "+loop_count+"loop");
		String str="";
//		int nos = ctx.number().size();
		if((ctx.number().sign().getText())=="-"){
			str+="JGE ";
		}
		else{
			str+="JLE ";
		}
		str+=loop_count+"loopEND "+visit(ctx.looppar(0))+" "+visit(ctx.looppar(1));
//		if(ctx.var(0)!=null){
//			visit(ctx.var(0));
//		}
//		if(ctx.number(0)!=null){
//			visit(ctx.number(0));
//		}
//		if(ctx.CLOSEPAR(0)!=null){
//			visit(ctx.CLOSEPAR(0));
//		}
//		if(ctx.TO()!=null){
//			visit(ctx.TO());
//		}
//		if(ctx.OPENPAR(1)!=null){
//			visit(ctx.OPENPAR(1));
//		}
//		if(ctx.var(1)!=null){
//			visit(ctx.var(1));
//		}
//		if(ctx.number(1)!=null){
//			visit(ctx.number(1));
//		}
//		if(ctx.CLOSEPAR(1)!=null){
//			visit(ctx.CLOSEPAR(1));
//		}
//		if(ctx.WITH()!=null){
//			visit(ctx.WITH());
//		}
//		if(ctx.number(2)!=null){
//			visit(ctx.number(2));
//		}
		if(ctx.body()!=null){
			visit(ctx.body());
		}
		return null;
	}

	@Override
	public String visitFuncdeclaration(MNCParser.FuncdeclarationContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("func declaration");
		String funcname = "";
		int outcount = 0;
//		if(ctx.FUNCTION()!=null){
//			visit(ctx.FUNCTION());
//		}
//		if(ctx.IDENTIFIER()!=null){
			funcname = ctx.IDENTIFIER().getText();
//			visit(ctx.IDENTIFIER());
//		}
//		if(ctx.OPENPAR()!=null){
//			visit(ctx.OPENPAR());
//		}
//		if(ctx.CLOSEPAR()!=null){
//			visit(ctx.CLOSEPAR());
//		}
		String outpar="";
		if(ctx.outstatement()!=null){
			 outpar = visit(ctx.outstatement());
			outcount = 1;
		}
		System.out.println("LBL "+ funcname+ " "+ ctx.instatement().size()+" "+ outcount);
		for(int i=0;i<ctx.instatement().size();i++){
			String inpar = visit(ctx.instatement(i));
			System.out.println("IPT "+ inpar);
		}
		if(ctx.outstatement()!=null){
		System.out.println("OPT "+ outpar);
		}
//		if(ctx.body()!=null){
			visit(ctx.body());
			System.out.println("LBL "+funcname+"END");
			
//		}
		return null;
	}

	@Override
	public String visitInstatement(MNCParser.InstatementContext ctx){
//		System.out.println("\nin instatement");
		String type = "";
		String var= "";
//		if(ctx.IN()!=null){
//			visit(ctx.IN());
//		}
//		if(ctx.type()!=null){
			type = visit(ctx.type());
//		}
//		if(ctx.var()!=null){
			var = visit(ctx.var());
//		}
		return type+" "+var;
	}

	@Override
	public String visitOutstatement(MNCParser.OutstatementContext ctx){
//		System.out.println("\nin instatement");
//		if(ctx.OUT()!=null){
//			visit(ctx.OUT());
//		}
		String type = "";
		String id= "";
//		if(ctx.type()!=null){
			type = visit(ctx.type());
//		}
//		if(ctx.ID()!=null){
			id = ctx.IDENTIFIER().getText();
//			visit(ctx.IDENTIFIER());
//		}
		return type+" "+id+" -1";
	}

	@Override
	public String visitPrintcall(MNCParser.PrintcallContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("print call");
//		if(ctx.PRINT()!=null){
//			visit(ctx.PRINT());
//		}
		
		if(ctx.var()!=null){
			System.out.println("OUT var "+visit(ctx.var()));
		}
		if(ctx.bool()!=null){
			System.out.println("OUT val "+visit(ctx.bool()));
//			visit(ctx.bool());
		}
		if(ctx.number()!=null){
			System.out.println("OUT val "+visit(ctx.number()));
//			visit(ctx.number());
		}
		return null;
	}

	@Override
	public String visitFunctioncall(MNCParser.FunctioncallContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin function call");
//		if(ctx.var()!=null){
//			System.out.println("PAR "+visit(ctx.var(0)));
//		}
		for(int i=0;i<ctx.var().size();i++){
//			visit(ctx.SEPERATOR(i));
			System.out.println("PAR "+visit(ctx.var(i)));
		}
		System.out.println("JMP "+ctx.IDENTIFIER().getText());
//		if(ctx.IDENTIFIER()!=null){
//			visit(ctx.IDENTIFIER());
//		}
//		if(ctx.OPENPAR()!=null){
//			visit(ctx.OPENPAR());
//		}
//		if(ctx.CLOSEPAR()!=null){
//			visit(ctx.CLOSEPAR());
//		}
		return null;
	}

	@Override
	public String visitBoolcheck(MNCParser.BoolcheckContext ctx) {
		// TODO Auto-generated method stub
		String str="";
		switch(ctx.CONDITIONS().getText()){
			case "==": str = str+"JNE ";
					break;
			case ">=":str = str+"JLT ";
					break;
			case "<=":str = str+"JGT ";
					break;
			case ">":str = str+"JLE ";
					break;
			case "<":str = str+"JGE ";
					break;
			case "!=":str = str+"JEQ ";
					break;
		}
		str = str+if_count+"if "+visit(ctx.expr(0))+" "+visit(ctx.expr(1));
//		System.out.println("\nin boolcheck");
//		if(ctx.expr(0)!=null){
//			visit(ctx.expr(0));
//		}
//		if(ctx.CONDITIONS()!=null){
//			visit(ctx.CONDITIONS());
//		}
//		if(ctx.expr(1)!=null){
//			visit(ctx.expr(1));
//		}
		return str;
	}

	@Override
	public String visitSign(MNCParser.SignContext ctx) {
		// TODO Auto-generated method stub
//		System.out.println("\nin sign");
//		if(ctx.OPENPAR()!=null){
//			visit(ctx.OPENPAR());
//		}
		if(ctx.ADD()!=null){
			return "";
//			visit(ctx.ADD());
		}
		if(ctx.SUB()!=null){
			return "-";
//			visit(ctx.SUB());
		}
//		if(ctx.CLOSEPAR()!=null){
//			visit(ctx.CLOSEPAR());
//		}
		return null;
	}
	
}
